<% let pageId = '005'; %> <% let path = jsonData.pages[pageId].path %>

<!DOCTYPE html>
<html lang="ja">
  <%- include('../common/_head', {pageId:pageId }) %>
  <body data-barba="wrapper">
    <%- include('../common/_header', {pageId:pageId }) %>
    <div id="common-wrapper" class="common-wrapper">
        <div class="container" data-barba="container" data-barba-namespace="home">
          <h1>005</h1>
          <canvas id="myCanvas"></canvas>
        </div>
    </div>
    <%- include('../common/_footer', {pageId:pageId }) %>
      <%-
    include('../common/_script', {pageId:pageId }) %>
    <script src="https://unpkg.com/three@0.147.0/build/three.min.js"></script>
    <script src="https://unpkg.com/three@0.147.0/examples/js/controls/OrbitControls.js"></script>
    <script>
      // ページの読み込みを待つ
      window.addEventListener("DOMContentLoaded", init);

      function init() {
        // サイズを指定
        const width = 960;
        const height = 540;

        // レンダラーを作成
        const canvasElement = document.querySelector("#myCanvas");
        const renderer = new THREE.WebGLRenderer({
          canvas: canvasElement,
        });
        renderer.setSize(width, height);

        // シーンを作成
        const scene = new THREE.Scene();

        // カメラを作成
        const camera = new THREE.PerspectiveCamera(45, width / height);
        // カメラの初期座標を設定
        camera.position.set(0, 0, 1000);

        // カメラコントローラーを作成
        const controls = new THREE.OrbitControls(camera, canvasElement);

        // 形状とマテリアルからメッシュを作成します
        const mesh = new THREE.Mesh(
          new THREE.BoxGeometry(300, 300, 300),
          new THREE.MeshNormalMaterial()
        );
        scene.add(mesh);

        tick();

        // 毎フレーム時に実行されるループイベントです
        function tick() {
          // レンダリング
          renderer.render(scene, camera);
          requestAnimationFrame(tick);
        }
      }
    </script>
  </body>

</html>
