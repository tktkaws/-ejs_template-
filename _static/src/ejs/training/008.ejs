<html>
  <head>
    <meta charset="utf-8" />
    <script src="https://unpkg.com/three@0.147.0/build/three.min.js"></script>
    <script>
      // ページの読み込みを待つ
      window.addEventListener('DOMContentLoaded', init);

      function init() {
        // サイズを指定
        const width = 960;
        const height = 540;

        // レンダラーを作成
        const renderer = new THREE.WebGLRenderer({
          canvas: document.querySelector('#myCanvas'),
          antialias: true,
        });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(width, height);

        // シーンを作成
        const scene = new THREE.Scene();

        // カメラを作成
        const camera = new THREE.PerspectiveCamera(45, width / height);
        camera.position.set(0, 0, +1000);

        // ドーナツを作成
        const geometry = new THREE.TorusGeometry(300, 100, 64, 100);
        // マテリアルを作成
        const material = new THREE.MeshNormalMaterial();
        // メッシュを作成
        const mesh = new THREE.Mesh(geometry, material);
        // 3D空間にメッシュを追加
        scene.add(mesh);

        tick();

        // 毎フレーム時に実行されるループイベントです
        function tick() {
          // メッシュを回転させる
          mesh.rotation.x += 0.01;
          mesh.rotation.y += 0.01;

          // レンダリング
          renderer.render(scene, camera);

          requestAnimationFrame(tick);
        }
      }
    </script>
     <script>
      // ページの読み込みを待つ
      window.addEventListener('DOMContentLoaded', init);

      function init() {
        // サイズを指定
        const width = 960;
        const height = 540;

        // レンダラーを作成
        const renderer = new THREE.WebGLRenderer({
          canvas: document.querySelector('#myCanvas02'),
          antialias: true,
        });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(width, height);

        // シーンを作成
        const scene = new THREE.Scene();

        // カメラを作成
        const camera = new THREE.PerspectiveCamera(45, width / height);
        camera.position.set(0, 0, +1000);

        // ドーナツを作成
        const geometry = new THREE.TorusGeometry(300, 100, 64, 100);
        // マテリアルを作成
        const material = new THREE.MeshLambertMaterial({ color: 0x6699ff });
        // メッシュを作成
        const mesh = new THREE.Mesh(geometry, material);
        // 3D空間にメッシュを追加
        scene.add(mesh);

        // 平行光源
        const directionalLight = new THREE.DirectionalLight(0xffffff);
        directionalLight.position.set(1, 1, 1);
        scene.add(directionalLight);

        // ポイント光源
        const pointLight = new THREE.PointLight(0xffffff, 2, 1000);
        scene.add(pointLight);
        const pointLightHelper = new THREE.PointLightHelper(pointLight, 30);
        scene.add(pointLightHelper);

        tick();

        // 毎フレーム時に実行されるループイベントです
        function tick() {
          // メッシュを回転させる
          mesh.rotation.x += 0.01;
          mesh.rotation.y += 0.01;

          // ライトを周回させる
          pointLight.position.set(
            500 * Math.sin(Date.now() / 500),
            500 * Math.sin(Date.now() / 1000),
            500 * Math.cos(Date.now() / 500)
          );

          // レンダリング
          renderer.render(scene, camera);

          requestAnimationFrame(tick);
        }
      }
    </script>
     <script>
      // ページの読み込みを待つ
      window.addEventListener('DOMContentLoaded', init);

      function init() {
        // サイズを指定
        const width = 960;
        const height = 540;

        // レンダラーを作成
        const renderer = new THREE.WebGLRenderer({
          canvas: document.querySelector('#myCanvas03'),
          antialias: true,
        });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(width, height);

        // シーンを作成
        const scene = new THREE.Scene();

        // カメラを作成
        const camera = new THREE.PerspectiveCamera(45, width / height);
        camera.position.set(0, 0, +1000);

        // ドーナツを作成
        const geometry = new THREE.TorusGeometry(300, 100, 64, 100);
        // マテリアルを作成
        const material = new THREE.MeshPhongMaterial({ color: 0x6699ff });
        // メッシュを作成
        const mesh = new THREE.Mesh(geometry, material);
        // 3D空間にメッシュを追加
        scene.add(mesh);

        // 平行光源
        const directionalLight = new THREE.DirectionalLight(0xffffff);
        directionalLight.position.set(1, 1, 1);
        scene.add(directionalLight);

        // ポイント光源
        const pointLight = new THREE.PointLight(0xffffff, 2, 1000);
        scene.add(pointLight);
        const pointLightHelper = new THREE.PointLightHelper(pointLight, 30);
        scene.add(pointLightHelper);

        tick();

        // 毎フレーム時に実行されるループイベントです
        function tick() {
          // メッシュを回転させる
          mesh.rotation.x += 0.01;
          mesh.rotation.y += 0.01;

          // ライトを周回させる
          pointLight.position.set(
            500 * Math.sin(Date.now() / 500),
            500 * Math.sin(Date.now() / 1000),
            500 * Math.cos(Date.now() / 500)
          );

          // レンダリング
          renderer.render(scene, camera);

          requestAnimationFrame(tick);
        }
      }
    </script>
     <script>
      // ページの読み込みを待つ
      window.addEventListener('DOMContentLoaded', init);

      function init() {
        // サイズを指定
        const width = 960;
        const height = 540;

        // レンダラーを作成
        const renderer = new THREE.WebGLRenderer({
          canvas: document.querySelector('#myCanvas04'),
          antialias: true,
        });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(width, height);

        // シーンを作成
        const scene = new THREE.Scene();

        // カメラを作成
        const camera = new THREE.PerspectiveCamera(45, width / height);
        camera.position.set(0, 0, +1000);

        // ドーナツを作成
        const geometry = new THREE.TorusGeometry(300, 100, 64, 100);
        // マテリアルを作成
        const material = new THREE.MeshToonMaterial({ color: 0x6699ff });
        // メッシュを作成
        const mesh = new THREE.Mesh(geometry, material);
        // 3D空間にメッシュを追加
        scene.add(mesh);

        // 平行光源
        const directionalLight = new THREE.DirectionalLight(0xffffff);
        directionalLight.position.set(1, 1, 1);
        scene.add(directionalLight);

        // ポイント光源
        const pointLight = new THREE.PointLight(0xffffff, 2, 1000);
        scene.add(pointLight);
        const pointLightHelper = new THREE.PointLightHelper(pointLight, 30);
        scene.add(pointLightHelper);

        tick();

        // 毎フレーム時に実行されるループイベントです
        function tick() {
          // メッシュを回転させる
          mesh.rotation.x += 0.01;
          mesh.rotation.y += 0.01;

          // ライトを周回させる
          pointLight.position.set(
            500 * Math.sin(Date.now() / 500),
            500 * Math.sin(Date.now() / 1000),
            500 * Math.cos(Date.now() / 500)
          );

          // レンダリング
          renderer.render(scene, camera);

          requestAnimationFrame(tick);
        }
      }
    </script>
    <script>
      // ページの読み込みを待つ
      window.addEventListener('DOMContentLoaded', init);

      function init() {
        // サイズを指定
        const width = 960;
        const height = 540;

        // レンダラーを作成
        const renderer = new THREE.WebGLRenderer({
          canvas: document.querySelector('#myCanvas05'),
          antialias: true,
        });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(width, height);

        // シーンを作成
        const scene = new THREE.Scene();

        // カメラを作成
        const camera = new THREE.PerspectiveCamera(45, width / height);
        camera.position.set(0, 0, +1000);

        // ドーナツを作成
        const geometry = new THREE.TorusGeometry(300, 100, 64, 100);
        // マテリアルを作成
        const material = new THREE.MeshStandardMaterial({
          color: 0x6699ff,
          roughness: 0.5,
        });
        // メッシュを作成
        const mesh = new THREE.Mesh(geometry, material);
        // 3D空間にメッシュを追加
        scene.add(mesh);

        // 平行光源
        const directionalLight = new THREE.DirectionalLight(0xffffff);
        directionalLight.position.set(1, 1, 1);
        scene.add(directionalLight);

        // ポイント光源
        const pointLight = new THREE.PointLight(0xffffff, 2, 1000);
        scene.add(pointLight);
        const pointLightHelper = new THREE.PointLightHelper(pointLight, 30);
        scene.add(pointLightHelper);

        tick();

        // 毎フレーム時に実行されるループイベントです
        function tick() {
          // メッシュを回転させる
          mesh.rotation.x += 0.01;
          mesh.rotation.y += 0.01;

          // ライトを周回させる
          pointLight.position.set(
            500 * Math.sin(Date.now() / 500),
            500 * Math.sin(Date.now() / 1000),
            500 * Math.cos(Date.now() / 500)
          );

          // レンダリング
          renderer.render(scene, camera);

          requestAnimationFrame(tick);
        }
      }
    </script>
  </head>
  <body>
    <header>
      <ul>
        <li>
          <a href="/training/001.html">
            001
          </a>
        </li>
      </ul>
    </header>
    <h1>
      <a href="https://ics.media/tutorial-three/material_variation/">
        https://ics.media/tutorial-three/material_variation/
      </a>

    </h1>
    <canvas id="myCanvas"></canvas>
    <canvas id="myCanvas02"></canvas>
    <canvas id="myCanvas03"></canvas>
    <canvas id="myCanvas04"></canvas>
    <canvas id="myCanvas05"></canvas>
  </body>
</html>
